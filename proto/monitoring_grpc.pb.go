// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/monitoring.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MonitoringService_RequestMonitoring_FullMethodName = "/proto.monitoring.MonitoringService/RequestMonitoring"
)

// MonitoringServiceClient is the client API for MonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoringServiceClient interface {
	RequestMonitoring(ctx context.Context, in *MonitoringRequest, opts ...grpc.CallOption) (MonitoringService_RequestMonitoringClient, error)
}

type monitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringServiceClient(cc grpc.ClientConnInterface) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) RequestMonitoring(ctx context.Context, in *MonitoringRequest, opts ...grpc.CallOption) (MonitoringService_RequestMonitoringClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonitoringService_ServiceDesc.Streams[0], MonitoringService_RequestMonitoring_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringServiceRequestMonitoringClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringService_RequestMonitoringClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type monitoringServiceRequestMonitoringClient struct {
	grpc.ClientStream
}

func (x *monitoringServiceRequestMonitoringClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitoringServiceServer is the server API for MonitoringService service.
// All implementations must embed UnimplementedMonitoringServiceServer
// for forward compatibility
type MonitoringServiceServer interface {
	RequestMonitoring(*MonitoringRequest, MonitoringService_RequestMonitoringServer) error
	mustEmbedUnimplementedMonitoringServiceServer()
}

// UnimplementedMonitoringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonitoringServiceServer struct {
}

func (UnimplementedMonitoringServiceServer) RequestMonitoring(*MonitoringRequest, MonitoringService_RequestMonitoringServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestMonitoring not implemented")
}
func (UnimplementedMonitoringServiceServer) mustEmbedUnimplementedMonitoringServiceServer() {}

// UnsafeMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServiceServer will
// result in compilation errors.
type UnsafeMonitoringServiceServer interface {
	mustEmbedUnimplementedMonitoringServiceServer()
}

func RegisterMonitoringServiceServer(s grpc.ServiceRegistrar, srv MonitoringServiceServer) {
	s.RegisterService(&MonitoringService_ServiceDesc, srv)
}

func _MonitoringService_RequestMonitoring_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitoringRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServiceServer).RequestMonitoring(m, &monitoringServiceRequestMonitoringServer{stream})
}

type MonitoringService_RequestMonitoringServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type monitoringServiceRequestMonitoringServer struct {
	grpc.ServerStream
}

func (x *monitoringServiceRequestMonitoringServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

// MonitoringService_ServiceDesc is the grpc.ServiceDesc for MonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.monitoring.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestMonitoring",
			Handler:       _MonitoringService_RequestMonitoring_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/monitoring.proto",
}

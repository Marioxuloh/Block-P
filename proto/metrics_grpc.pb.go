// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricService_RequestMetrics_FullMethodName = "/proto.monitoring.MetricService/RequestMetrics"
)

// MetricServiceClient is the client API for MetricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricServiceClient interface {
	RequestMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (MetricService_RequestMetricsClient, error)
}

type metricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricServiceClient(cc grpc.ClientConnInterface) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) RequestMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (MetricService_RequestMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricService_ServiceDesc.Streams[0], MetricService_RequestMetrics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceRequestMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetricService_RequestMetricsClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type metricServiceRequestMetricsClient struct {
	grpc.ClientStream
}

func (x *metricServiceRequestMetricsClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricServiceServer is the server API for MetricService service.
// All implementations must embed UnimplementedMetricServiceServer
// for forward compatibility
type MetricServiceServer interface {
	RequestMetrics(*MetricsRequest, MetricService_RequestMetricsServer) error
	mustEmbedUnimplementedMetricServiceServer()
}

// UnimplementedMetricServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricServiceServer struct {
}

func (UnimplementedMetricServiceServer) RequestMetrics(*MetricsRequest, MetricService_RequestMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestMetrics not implemented")
}
func (UnimplementedMetricServiceServer) mustEmbedUnimplementedMetricServiceServer() {}

// UnsafeMetricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServiceServer will
// result in compilation errors.
type UnsafeMetricServiceServer interface {
	mustEmbedUnimplementedMetricServiceServer()
}

func RegisterMetricServiceServer(s grpc.ServiceRegistrar, srv MetricServiceServer) {
	s.RegisterService(&MetricService_ServiceDesc, srv)
}

func _MetricService_RequestMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricServiceServer).RequestMetrics(m, &metricServiceRequestMetricsServer{stream})
}

type MetricService_RequestMetricsServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type metricServiceRequestMetricsServer struct {
	grpc.ServerStream
}

func (x *metricServiceRequestMetricsServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

// MetricService_ServiceDesc is the grpc.ServiceDesc for MetricService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.monitoring.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestMetrics",
			Handler:       _MetricService_RequestMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/metrics.proto",
}

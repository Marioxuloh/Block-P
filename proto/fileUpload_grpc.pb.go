// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/fileUpload.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UploadFileFromMasterService_RequestUploadFile_FullMethodName = "/proto.fileUploading.UploadFileFromMasterService/RequestUploadFile"
)

// UploadFileFromMasterServiceClient is the client API for UploadFileFromMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadFileFromMasterServiceClient interface {
	RequestUploadFile(ctx context.Context, opts ...grpc.CallOption) (UploadFileFromMasterService_RequestUploadFileClient, error)
}

type uploadFileFromMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadFileFromMasterServiceClient(cc grpc.ClientConnInterface) UploadFileFromMasterServiceClient {
	return &uploadFileFromMasterServiceClient{cc}
}

func (c *uploadFileFromMasterServiceClient) RequestUploadFile(ctx context.Context, opts ...grpc.CallOption) (UploadFileFromMasterService_RequestUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &UploadFileFromMasterService_ServiceDesc.Streams[0], UploadFileFromMasterService_RequestUploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadFileFromMasterServiceRequestUploadFileClient{stream}
	return x, nil
}

type UploadFileFromMasterService_RequestUploadFileClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type uploadFileFromMasterServiceRequestUploadFileClient struct {
	grpc.ClientStream
}

func (x *uploadFileFromMasterServiceRequestUploadFileClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadFileFromMasterServiceRequestUploadFileClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadFileFromMasterServiceServer is the server API for UploadFileFromMasterService service.
// All implementations must embed UnimplementedUploadFileFromMasterServiceServer
// for forward compatibility
type UploadFileFromMasterServiceServer interface {
	RequestUploadFile(UploadFileFromMasterService_RequestUploadFileServer) error
	mustEmbedUnimplementedUploadFileFromMasterServiceServer()
}

// UnimplementedUploadFileFromMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadFileFromMasterServiceServer struct {
}

func (UnimplementedUploadFileFromMasterServiceServer) RequestUploadFile(UploadFileFromMasterService_RequestUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestUploadFile not implemented")
}
func (UnimplementedUploadFileFromMasterServiceServer) mustEmbedUnimplementedUploadFileFromMasterServiceServer() {
}

// UnsafeUploadFileFromMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadFileFromMasterServiceServer will
// result in compilation errors.
type UnsafeUploadFileFromMasterServiceServer interface {
	mustEmbedUnimplementedUploadFileFromMasterServiceServer()
}

func RegisterUploadFileFromMasterServiceServer(s grpc.ServiceRegistrar, srv UploadFileFromMasterServiceServer) {
	s.RegisterService(&UploadFileFromMasterService_ServiceDesc, srv)
}

func _UploadFileFromMasterService_RequestUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadFileFromMasterServiceServer).RequestUploadFile(&uploadFileFromMasterServiceRequestUploadFileServer{stream})
}

type UploadFileFromMasterService_RequestUploadFileServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type uploadFileFromMasterServiceRequestUploadFileServer struct {
	grpc.ServerStream
}

func (x *uploadFileFromMasterServiceRequestUploadFileServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadFileFromMasterServiceRequestUploadFileServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadFileFromMasterService_ServiceDesc is the grpc.ServiceDesc for UploadFileFromMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadFileFromMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.fileUploading.UploadFileFromMasterService",
	HandlerType: (*UploadFileFromMasterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestUploadFile",
			Handler:       _UploadFileFromMasterService_RequestUploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/fileUpload.proto",
}

const (
	UploadFileFromNodeService_RequestUploadFile_FullMethodName = "/proto.fileUploading.UploadFileFromNodeService/RequestUploadFile"
)

// UploadFileFromNodeServiceClient is the client API for UploadFileFromNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadFileFromNodeServiceClient interface {
	RequestUploadFile(ctx context.Context, in *FileUploadResponse, opts ...grpc.CallOption) (UploadFileFromNodeService_RequestUploadFileClient, error)
}

type uploadFileFromNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadFileFromNodeServiceClient(cc grpc.ClientConnInterface) UploadFileFromNodeServiceClient {
	return &uploadFileFromNodeServiceClient{cc}
}

func (c *uploadFileFromNodeServiceClient) RequestUploadFile(ctx context.Context, in *FileUploadResponse, opts ...grpc.CallOption) (UploadFileFromNodeService_RequestUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &UploadFileFromNodeService_ServiceDesc.Streams[0], UploadFileFromNodeService_RequestUploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadFileFromNodeServiceRequestUploadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UploadFileFromNodeService_RequestUploadFileClient interface {
	Recv() (*FileUploadRequest, error)
	grpc.ClientStream
}

type uploadFileFromNodeServiceRequestUploadFileClient struct {
	grpc.ClientStream
}

func (x *uploadFileFromNodeServiceRequestUploadFileClient) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadFileFromNodeServiceServer is the server API for UploadFileFromNodeService service.
// All implementations must embed UnimplementedUploadFileFromNodeServiceServer
// for forward compatibility
type UploadFileFromNodeServiceServer interface {
	RequestUploadFile(*FileUploadResponse, UploadFileFromNodeService_RequestUploadFileServer) error
	mustEmbedUnimplementedUploadFileFromNodeServiceServer()
}

// UnimplementedUploadFileFromNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadFileFromNodeServiceServer struct {
}

func (UnimplementedUploadFileFromNodeServiceServer) RequestUploadFile(*FileUploadResponse, UploadFileFromNodeService_RequestUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestUploadFile not implemented")
}
func (UnimplementedUploadFileFromNodeServiceServer) mustEmbedUnimplementedUploadFileFromNodeServiceServer() {
}

// UnsafeUploadFileFromNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadFileFromNodeServiceServer will
// result in compilation errors.
type UnsafeUploadFileFromNodeServiceServer interface {
	mustEmbedUnimplementedUploadFileFromNodeServiceServer()
}

func RegisterUploadFileFromNodeServiceServer(s grpc.ServiceRegistrar, srv UploadFileFromNodeServiceServer) {
	s.RegisterService(&UploadFileFromNodeService_ServiceDesc, srv)
}

func _UploadFileFromNodeService_RequestUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileUploadResponse)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UploadFileFromNodeServiceServer).RequestUploadFile(m, &uploadFileFromNodeServiceRequestUploadFileServer{stream})
}

type UploadFileFromNodeService_RequestUploadFileServer interface {
	Send(*FileUploadRequest) error
	grpc.ServerStream
}

type uploadFileFromNodeServiceRequestUploadFileServer struct {
	grpc.ServerStream
}

func (x *uploadFileFromNodeServiceRequestUploadFileServer) Send(m *FileUploadRequest) error {
	return x.ServerStream.SendMsg(m)
}

// UploadFileFromNodeService_ServiceDesc is the grpc.ServiceDesc for UploadFileFromNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadFileFromNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.fileUploading.UploadFileFromNodeService",
	HandlerType: (*UploadFileFromNodeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestUploadFile",
			Handler:       _UploadFileFromNodeService_RequestUploadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/fileUpload.proto",
}

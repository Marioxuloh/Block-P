// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/fileUpload.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UploadFileService_RequestUploadFile_FullMethodName = "/proto.fileUploading.UploadFileService/RequestUploadFile"
)

// UploadFileServiceClient is the client API for UploadFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadFileServiceClient interface {
	RequestUploadFile(ctx context.Context, opts ...grpc.CallOption) (UploadFileService_RequestUploadFileClient, error)
}

type uploadFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadFileServiceClient(cc grpc.ClientConnInterface) UploadFileServiceClient {
	return &uploadFileServiceClient{cc}
}

func (c *uploadFileServiceClient) RequestUploadFile(ctx context.Context, opts ...grpc.CallOption) (UploadFileService_RequestUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &UploadFileService_ServiceDesc.Streams[0], UploadFileService_RequestUploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadFileServiceRequestUploadFileClient{stream}
	return x, nil
}

type UploadFileService_RequestUploadFileClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type uploadFileServiceRequestUploadFileClient struct {
	grpc.ClientStream
}

func (x *uploadFileServiceRequestUploadFileClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadFileServiceRequestUploadFileClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadFileServiceServer is the server API for UploadFileService service.
// All implementations must embed UnimplementedUploadFileServiceServer
// for forward compatibility
type UploadFileServiceServer interface {
	RequestUploadFile(UploadFileService_RequestUploadFileServer) error
	mustEmbedUnimplementedUploadFileServiceServer()
}

// UnimplementedUploadFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadFileServiceServer struct {
}

func (UnimplementedUploadFileServiceServer) RequestUploadFile(UploadFileService_RequestUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestUploadFile not implemented")
}
func (UnimplementedUploadFileServiceServer) mustEmbedUnimplementedUploadFileServiceServer() {}

// UnsafeUploadFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadFileServiceServer will
// result in compilation errors.
type UnsafeUploadFileServiceServer interface {
	mustEmbedUnimplementedUploadFileServiceServer()
}

func RegisterUploadFileServiceServer(s grpc.ServiceRegistrar, srv UploadFileServiceServer) {
	s.RegisterService(&UploadFileService_ServiceDesc, srv)
}

func _UploadFileService_RequestUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadFileServiceServer).RequestUploadFile(&uploadFileServiceRequestUploadFileServer{stream})
}

type UploadFileService_RequestUploadFileServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type uploadFileServiceRequestUploadFileServer struct {
	grpc.ServerStream
}

func (x *uploadFileServiceRequestUploadFileServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadFileServiceRequestUploadFileServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadFileService_ServiceDesc is the grpc.ServiceDesc for UploadFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.fileUploading.UploadFileService",
	HandlerType: (*UploadFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestUploadFile",
			Handler:       _UploadFileService_RequestUploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/fileUpload.proto",
}
